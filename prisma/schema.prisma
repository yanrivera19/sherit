// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Theme {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
	subscribedUsers ThemeSubscriptions[]
	posts Post[]

	@@index(fields: [id], type: Hash)
}

model ThemeSubscriptions {
	theme Theme @relation(fields: [themeId], references: [id])
	themeId String
	user User @relation(fields: [userId], references: [id])
	userId String
	assignedAt DateTime @default(now())
  assignedBy String

  @@id([themeId, userId])
}

model Post {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  published Boolean  @default(false) //to make drafts. If false, we will display post in list of drafts
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
	comments Comment[]
	theme Theme @relation(fields: [themeId], references: [id])
	themeId String

	@@index(fields: [id], type: Hash)
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime @default(now())
  email     String   @unique
  username  String   @unique
	emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts      Post[]
	comments Comment[]
	createdThemes Theme[]
  subscribedThemes     ThemeSubscriptions[]

	@@index(fields: [id], type: Hash)
}

model Comment {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
	author    User     @relation(fields: [authorId], references: [id])
  authorId  String 
	parentComment Comment? @relation("ParentChildComments", fields: [parentCommentId], references: [id])
	parentCommentId String?  @unique
	childComments Comment[] @relation("ParentChildComments")
	post Post @relation(fields: [postId], references: [id])
	postId String

	@@index(fields: [id], type: Hash)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}